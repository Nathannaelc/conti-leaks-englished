PURPOSE

Automate the testing of the injector module


INJECTOR DESCRIPTION

The injector is a module made in 2 variants and run in 2 different ways:
- with log
- without log
Ð¸
- independently
- through a bot

The logged module requires the following configs:
c:/temp/sinj4.xml
c:/temp/dinj.xml
c:/temp/dpost.xml

The logs are created in
c:/temp/loader.log
c:/temp/core-dll.log


TESTS

A test is a PowerShell v2.0 function that tests one simple condition,
and returns a boolean value when the condition is met.
Successful test execution corresponds to a logical truth.
The test should correspond to the Message property.
At any test result this property contains a diagnostic which confirms this result.
For example, if there is a search string in the log (by which the test condition is checked),
this property is copied to the found string. If the string is missing, the field is filled with an arbitrary
description of the reason (for example, "*substring*: no match in c:/temp/logname.log")

The following tests need to be written:
sinj_proxy_alive
dinj_proxy_alive
dpost_proxy_alive
* these three tests should be done last

loader_log_started
core_log_started

chrome_has_inject
ff_has_inject
ie_has_inject
edge_has_inject

chrome_dpost_ok
ff_dpost_ok
ie_dpost_ok
edge_dpost_ok

chrome_http2_off
ff_http2_off
ie_http2_off

TODO bitness of browsers
OS bitness


REALIZATION

The result should be a PowerShell v2.0 script.
The script should return a return code to the OS equal to the number of failed tests.

When running, the script should perform an auto-update similar to other autotests scripts.

At the beginning of each test (except for *proxy* tests and other specified cases) the script should
run the loader.exe file from the current directory, and after the test execution kill the process
and delete log files.

The test should keep a log of the form
2018-08-14 00:01:02 test_name started
* test message, if any (Message)
2018-08-14 00:01:12 test_name: OK|FAILED|SKIPPED

If any test fails (except the pad tests), further tests should be skipped,
the script should be terminated. Missing tests are logically counted as failed tests.


SETTINGS

The settings are stored in variables at the very beginning of the script:
- configuration path sinj
- configuration path dinj
- configuration path dpost
- path to loader.log
- path to core-dll.log
- module warmup timeout (20 seconds by default)
- warm up timeout for browsers (35 seconds by default)
- browser stability timeout (1 minute by default)
- login and url for auto-update


DETAILED DESCRIPTION OF THE TEST CASES

* sinj_proxy_alive
From the sinj config, the first routing is selected, a TCP connection is opened
to a given port.
The test is successful if the TCP connection is opened.

* dinj_proxy_alive
From the dinj config, the first routing is selected and a TCP connection is opened
to a given port.
The test is successful if the TCP connection is opened.

* dpost_proxy_alive
The dpost config tests all pads by opening a TCP connection on a given port.
The test is successful if it was possible to open a TCP connection on at least one pad.

* loader_log_started
Loader.exe is started.
The test is successful if after a warm-up time:
- the loader.log file appears in the correct path
- there is a record in it
Browsers payload unpacked successfully

* chrome_has_inject
Loader.exe is started.
After a warm-up time the Chrome process is started.
After the browser warms up, the following conditions are checked:
- Core-dll.log file appears on the correct path
- It will contain the following entries
We are Chrome
Chrome version: xxx
Chrome SSL functions found
(this is a message for the test)
- there are at least 3 Chrome.exe processes in the list of processes after the browser stability timeout
(if this item is broken the test fails, the following line is added to the test message
browser crashed!
)
- If there is the following entry in the log
Chrome SSL functions NOT FOUND
the test failed, and the message and function addresses (below in the log) are copied to the test message

* ff_has_inject
Loader.exe is started.
After a warm-up time, the Mozilla Firefox process starts.
After the browser warms up, the following conditions are checked:
- the core-dll.log file appears on the correct path
- It contains the following entries
We are Firefox
Mozilla Firefox version: xxx
(this is a message for the test)
- there is at least 1 process firefox.exe after a browser stability timeout
(if this option is broken the test is crashed, the following line is added to the test message
browser crashed!
)

* ie_has_inject
Loader.exe is started.
After a warm-up time, the Internet Explorer process starts.
After the browser warms up, the following conditions are checked:
- the core-dll.log file appears in the right path
- It contains the following entries
We are IE
IE version xxx
(This is a message for the test. If there is more than one line with version, glue them all to the message)
- there is at least 1 process iexplore.exe after browser stability timeout
(in case of violation of this item the test failed, the following line is added to the test message
browser crashed!
)


* edge_has_inject

chrome_dpost_ok
ff_dpost_ok
ie_dpost_ok
edge_dpost_ok

* chrome_http2_off
Loader.exe is started.
After a warm-up time, the Chrome process starts.
After the browser warms up, the following conditions are checked:
- At least one chrome.exe process has the following command line switches
  --disable-http2 --use-spdy=off --disable-quic

* ff_http2_off
Loader.exe is started.
After a warm-up time the file %APPDATA%\Mozilla\Firefox\Profiles\<profileName>\prefs.js is searched
The test is considered successful if the file contains a substring
user_pref("network.http.spdy.enabled.http2", true)

* ie_http2_off
Loader.exe is started.
After a warm-up time, the value of the registry key is checked:
HKCU/Software\Microsoft\Windows\CurrentVersion\Internet Settings\EnableHTTP2 == 0


SECOND PHASE OBJECTIVES

* automatic preparation of VMs for testing, includes:
- installation or updating of Google Chrome
- installation or updating of Mozilla Firefox

* Integration with bot testing:
- add tests that check the presence of the inject in the browser WITHOUT parsing logs.
To do this, we need to find a way to view the page code of the running browser, from the script.

* basic inject test (common to all browsers)
Loader.exe is started.
After a warm-up time the browser is started.
After warmup time the page from the list is opened.
After loading time the page opens its source code.
In the source code the substring
TODO
The test is successful, if the substring is found.
The test requires working with windows through WinAPI.
