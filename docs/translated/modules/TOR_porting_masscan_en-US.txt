ADAPTING THE MASCAN PROGRAM TO THE SCANNER ADMINISTRATION
TERMS OF REFERENCE

PROJECT PURPOSE

Adapt the masscan software for use with the scanner admin, for distributed operation

DESCRIPTION

The source code of the project is here: https://github.com/robertdavidgraham/masscan
This is a fast port scanner, handling millions of packets per second and millions of addresses.
We need to saw it so that it:
1) work on Windows (it seems to be able to do that)
2) work without administrator privileges (there are doubts)
3) it should be designed as a module (see module_HOWTO.txt, code and builds.txt)

The configs are passed to the module through a Control() call. The name of the config is the string in the Ctl argument, the body of the config is the CtlArg argument,
the length of the config is CtlArgLen (see "module_HOWTO")

The module receives a single config named masrv, which contains a list of addresses of the control server,
separated by \r\n or \n, in address:port format.
If the port is even, it is HTTP, if it is odd - HTTPS.
If a protocol prefix (http/https) is specified, the prefix takes precedence over the specified port.
The module works with the control server that was reached first, for each request.


EVENTS

The module should send the following events via callback (see "module_HOWTO"):
- MASS scanner build %date% %time% started
- %d addresses tried, %d open ports detected - periodically every half an hour (timeout is set by constant in config.h)

SCANNER

The scanner receives the ranges to be scanned with an HTTP request to the server

GET /<group>/<clientid>/mass/domains HTTP/1.1
The group and clientid values are struct ParentInfo fields
 CHAR ParentID[256];
 CHAR ParentGroup[64];
(see module_HOWTO)

address range1[\r]\n
port range1[\r]\n
...
(multiple entries)

The odd-numbered line here contains the range of addresses to scan (in masscan format)
The even string contains the range of ports to be scanned (in masscan format)

Sending the results is done by DPOST request

 POST /<group>/<clientid>/mass/81 HTTP/1.1

The collected data is sent in a multipart/form-data container with source and data fields.
The value of the source field is "PORT scan".
Value of the data field: plain text, string delimiter \r\n
Record format:

address:port:protocol\r\n
...
(one or many entries)

For example:
195.1.15.68:53:udp\r\n
195.1.15.68:53:tcp\r\n

You can retrieve the frequency of namain data from the control server with an HTTP request
GET /<group>/<clientid>/mass/freq HTTP/1.1

In the body of the response we expect a number - this is the number of seconds, not more often than that the data should be sent.
If it is 0 - we send immediately when a new result is ready.
If it is a positive number - we accumulate records in the buffer and send once every X seconds,
clearing the buffer on successful sending.

GET /<group>/<clientid>/mass/over HTTP/1.1

The server's response is the same as to the request /domains - a new list of domains to work with.
If an unexpected response (empty list, error code, etc.) module goes to idle (scanning is stopped)
and makes the same request once every 10 minutes (time is a constant).

The scanner receives all the necessary settings by request:
GET /<group>/<clientid>/mass/name settings HTTP/1.1

The main settings of the original program should be added to the admin panel
TODO These settings will be added on the spot - now it's hard to say which ones you'll need.


ADMINC

The admins need to refine is to define the rule for splitting the total range into chunks.
The user enters ranges in one way or another (either in regular text input fields, or by loading lists as text files).
The task of admin is to split these ranges into more smaller ranges so that scanning one sub-range takes no more than an hour on the weakest machine,
and so that the bands were known to be larger than the number of bots online (there would always be a reserve of sub-bands to give out).
The general principle is that the smaller the size of a sub-band, the better.

The user's entry of ranges for scanning consists of two fields:
- address range
- port range

The syntax of the ranges is usual for network scanners:
1. you can specify individual addresses via , 10.0.0.1,10.0.0.2
2. you can specify a subnet using the number of significant bits 10.0.0.0/8
3. you can specify the beginning and the end with a dash 10.0.0.1-10.0.0.120
4. the same for ports, except item 2
You can specify multiple ranges. Then they are combined by OR

The admin user interface should allow for scopes with the above in mind.
