ADMIN AND BACKEND FOR PASSWORD AND VULNERABILITY SCANNERS
TERMS OF REFERENCE

INTRODUCTION

The system performs two functions:
1) coordination and management of a distributed network of scanners; distribution of tasks between them
2) a user interface for viewing and downloading data.


GENERAL INFORMATION

There are many scanners and they are organized into a distributed network.
Each scanner needs two things:
- Input data (source of the list of domains to scan; dictionaries for enumeration, rules, etc.)
- where to send the result.

In order to achieve high scanning efficiency, the activities of the scanners must be coordinated: give each scanner
The optimal scanning area for each scanner in terms of resource allocation.
To do this, our backend needs to keep track of what is given to whom, and what is processed by whom.

In this implementation, we will fractionate into sections only the list of domains.
We do not split the dictionaries; it is assumed that the module should run the full dictionary for each domain.

Count on the fact that there are several types of scanners. Accordingly, each type of scanner
needs its own section - in the database all data is stored in the section "scanner type".

Current scanner types:
- RDP scanner (API name: rdp)
- OWA (Outlook Web Access) scanner (API name: owa)
- Website vulnerability scanner (SQLScan) (API name: sql)

Settings for all types of scanners:
- list of domains (TOP Alexa https://s3.amazonaws.com/alexa-static/top-1m.csv.zip is used now; file format and packaging should be the same)
- scan area size (chosen in proportion to network size) - non-negative integer
- time of saving the area for a particular scanner - an integer non-negative number of seconds; by default 4 days; then select it empirically

Settings for the RDP scanner (given in response to a request from the scanner - setting names and values are given):
- mode: mode (brute|check)
- password dictionary(s): dict (text file packed in gzip)
- frequency of sending results to the server: freq (number of seconds >= 0; 0 means immediately when the next password is ready;
  not 0 - no more often than once in X seconds we wait for the accumulated pack)

Settings for the OWA scanner:
- dictionary of "login:password" pairs: dict (gzip packed text file)

Settings for the SQLScan scanner:
- rules: rules (text file)

The size of the chunk (a piece of the general list) should be calculated according to the following criteria:
- it must be the minimum possible, so that when new unemployed bots enter the network, they have something to give out
- the time needed for one bot to process a chunk should not exceed a certain small value, e.g. one hour
For example, for a single RDP thread, the worst possible time for a single match might be 120 seconds. Hence,
processing 500 username/password combinations will take 500*120=60000 seconds, i.e. almost a day.

For the size of the chunk the setting "time of saving the area for a particular scanner" should be adjusted - it should be approximately equal to
one and a half times the time of passing one chunk by one bot.


API BACKEND

API perform based on the HTTP server.
By default, the system responds to correct requests with HTTP 200 OK,
to incorrect requests - HTTP 404 Not Found.
In a broader sense, anything not 200 is considered an invalid state.

The server should always give the Content-Length header.
Avoid giving the length by Content-Disposition: chunked or by Connection: close.

All API URLs start with the /group/clientid/ group
where
  group - bot group
  clientid - bot id

Before replying to a request, the system must check if the group and ID are formally correct,
and reject the request if the parameters are incorrect.

Group validation: 4 to 6 characters; the first 3 characters - lowercase Latin, the last 1...3 characters - numbers

Validation ID: this is an uppercase string consisting of two components, separated by a dot.
The first part is <name>_XYYYYYYY, where name is some name that can somehow identify the machine
(computer name or user name depending on the type of operating system),
X - the symbol of the system the client is running on (W - windows, L - linux, A - Android, M - Mac OS),
YYYYYYYY - 3-7 digits containing major-version, minor-version and build of the operating system if it has any
(e.g. for 6.1 build 7600 it will be 617600).
The second part contains 32 random characters 0-9, A-F.
An example client id is QWERTY_W617600.11223344556677889900AABBCCDDEEFF.


GET /group/clientid/scantype/settingname HTTP/1.1
Get the specific setting by settingname for a given scanner type.
The body of the response varies depending on the setting

GET /group/clientid/scantype/domains HTTP/1.1
Get the section of domains for scanning.
scantype - type of scanner.

The system selects the next section of the domain list, marks it as occupied by this scanner
with a date-time stamp.
In response, the list of domains is returned as plain text; the line separator is \r\n
Content-Type: text/plain

If this site has been occupied by the same client,
we give the module that area again. This is a normal situation, which means
restart of the module without saving the state.

If the given plot is already occupied by another scanner of the same type,
Look at the setting "save time"; if the former owner of the site has not released it during this time,
and there were no signals from him, release the site and reassign it.
If the site is really occupied, the answer is 404 Not Found.


GET /group/clientid/scantype/over HTTP/1.1
Signal from the scanner that the site is being processed
The response is always HTTP 200 OK, regardless of the situation.
Check if the site was actually behind this module and if so, mark it as processed.
If not, we record an error in the log.
The body of the response is the same as for the /domains request.
The next free site is chosen, assigned to the module and given in the response.
If there are no free sites, you get a 404 code.


GET /group/clientid/scantype/dict HTTP/1.1
Request dictionary for given type of scanner.
In response - dictionary as loaded in the admin panel.
Content-Type: text/plain or application/gzip

POST /group/clientid/81 HTTP/1.1
The data was scanned by the scanner
The request body is a multipart/form-data container with the following fields:
  data - binary data up to 32k in size - the actual data to be parsed
  source - UTF-8 string up to 4096 bytes long - it contains an indication of the scanner type (for example, "OWA Passwords")
Any other fields in the parcel are ignored, but are not considered an error.

By default, the data receives UTF-8 text in the following format:

resource|login|password\n

The end of the string can be either Unix (\n) or DOS (\r\n)
  resource is where the password goes (e.g. URL. Or messenger type. Or host IP address. ITD).
  login
  password - okay

In such a record there can be additional fields with separator | (vertical slash)

In response, the server should output

HTTP 200 OK
Content-Type: ...
Content-Length: ...

/1/


CONTROL PANEL

The control panel should contain the following sections:
* dashboard
* scanner settings
* scanner data

On the dashboard we see a summary of scanner activity since the last update of the list of domains.
For each scanner the following information:
- pie charts with percent "processed/not processed"
- scan area size
- date-time of last update of the list of domains
- total unique bots working for this type of scan
- total logins/vulnerabilities found

In the scanner settings, for each scanner type, you can download data for it:
- list of domains
- dictionaries
- whatever else is out there.
When you update the list of domains or dictionaries the status of issued sites for this scanner is cleared,
Cleared all statistics (in the dashboard), and the issuance of sites begins again.
Therefore, when saving to consider the case of no changes in the configuration, so as not to invalidate the results of the network.

Under "data from scanners", each type of scanner has a separate tab or page.
On it we see a table with the fields
- date-time of scanning
- clientid
- group
- IP address
- acquired data

Fields can be sorted and filtered.

as well as the "download dump" button.
By the button we get the data for the entire operating history.

***
[10:49:01] <A> Report interval, seconds hint The module will report every N seconds about its status
[10:49:35] <A> Fetch request, seconds hint The module will upload the vulnerabilities found to the server every N seconds
[10:50:44] <A> Rules rename to Scan Rules
[10:51:11] <A> hint These are the scan rules for the module. XML format is
[10:52:36] <A> <rules>
  <rule>
    <name>rule name</name
    <type>time|diff (one of these two options)</type>
    <value1>probe value 1</value1>
    <value2>probe value 2</value2>
    </value3>probe value 3</value3
   </rule>
   ...
   <rule>
     ...
   </rule>
</rules>

[10:52:52] <A> CHANGE IT ONLY WHEN YOU KNOW WHAT YOU ARE DOING!
[10:54:04] <A> Domains hint These are the Internet domains to scan
[10:54:22] <A> Format is: plain text file; one domain per line; line separator is \n
[10:54:26] <A> Example:
[10:54:29] <A> www.site.com
[10:54:33] <A> domain.com
[10:54:34] <A> etc
[10:55:16] <A> Thead (1..10) rename to Scan threads number (1..10)
[10:56:31] <A> Time threshold (0..40) rename to Time threshold for time difference rules, seconds (0..40)
[10:58:35] <A> hint Time difference rule finds vulnerability by comparing injected and non-injected page loading time
[10:59:05] <A> change Threshold (0..1000) to Char threshold (0..1000) (number of characters)
[11:01:09] <A> hint This value determines injection success for difference rules. When the injected page differs from the non-injected page by this number of characters
