CRYPTOLOCKER AND ADMIN
TERMS OF REFERENCE


PURPOSE

Write a cryptolocker and a backend/admin to it, taking into account the current market realities.


ROLES IN THE SYSTEM

There are the following roles:
- admin (us)
- Advert (partner, registering in our system to earn money)
- victim
- Recoverer (mediator between the victim and us, plays for the victim)


BUSINESS MODEL AND BENEFITS

All payments to adverts go through our wallets.
The victim pays to a bitcoin address linked to the wallet of the system owner.
From this wallet, the money is sent to the adverts; our commissions are deposited into the wallet.
Thus, advert DOES NOT CONTROL bitcoin-addresses, which are listed on the landing-pages,
and CANNOT put their addresses AND CONTACTS on the lending pages.
In general, the landing page must be strictly censored by the system.

When an advert creates a new target, we assign the target one of our bitcoin addresses.
This address is chosen from the pool of addresses (tied to our wallet) set in the system settings.

The system monitors traffic at the addresses assigned to the adverts, and forwards all incoming payments minus the advert commission
to the addresses specified by the adverts themselves.

This scheme requires increased security when working with the master wallet. Only the owner of the system must have access to it.
Just like in the crypto-exchanges.

Recovery companies have a special role in this business, and it requires specific support in software.
Recovers usually ask us for a discount, buy back the unlocker, and sell it to the victim at a nominal price.
Their profit is this discount.
Therefore there are the following features to support these actions:
- private chat and chat history clearing
- Chat commands to hide the anchor and manage the landing page.
The point of them is to hide from the victim the fact that the anloker is available.


BOTLOCKER

0. The bot must check its IP against online geo-data bases.
THE PRESENCE OF IP-ADDRESS IN THE CIS ZONE LEADS TO IMMEDIATE TERMINATION AND DELETION FROM THE DISK!
How to get your external address see p.7.

The bot must ensure its persistence in the system (persist between reboots).
https://habr.com/ru/post/425177/

2. the bot must receive the maximum possible privileges in the system:

The bot must bypass the UAC:
https://github.com/hfiref0x/UACME
(working methods from somewhere around the middle 30...)
Do not try it on your personal machine! it can damage the OS.

4. The bot must generate an ID when it is installed in the system.
The bot ID is a string consisting of two components separated by a dot.
The first part is in the format %MACHINE%-%USER%_XYYYYYY, where
MACHINE is the name of the computer
USER - user name
X - the symbol of the host system the client is running on
(W - windows, L - Linux, A - Android, M - Mac OS),
YYYYYYY - 3-7 digits containing major-version, minor-version and build of operating system if available for systems
(e.g. for 6.1 build 7600 it will be 617600).
The second part contains 32 random characters 0-9, A-F.
An example client id is HOSTNAME-USER_W617600.11223344556677889900AABBCCDDEEFF.
The parameter is not case sensitive.

5. The bot has the name of its group - a string of six characters, the first three characters - lowercase Latin, the rest - numbers.

6. The bot must be accompanied by a builder, which sews into the bot its group and other essential parameters at the stage of linking.
The builder's task is to flash the resources to be changed into the bot, without giving access to the sources.

We propose the following scheme:
- the .obj-files are fed to the bilder
- containing resources to be changed (a group, etc.) The .obj-file is compiled from the source (or processed by some utility)

7. The bot must collect the following information about the environment:
- OS version and build
- list of network interfaces with IP-addresses
- external IP-address
https://habr.com/ru/company/emercoin/blog/335458/
https://github.com/emercoin/emercoin/blob/master/src/stun.cpp
// list of installed programs

This data is transmitted to the command server.
The bot obtains the address of the command server through Emercoin DNS domain resolution.

8. After installation and anchoring in the system, the bot starts encrypting files in the system using the following algorithm:
8.1 Encryption algorithm - optionally ChaCha or other streaming asymmetric cipher.
Cryptoalgorithm requirements:
- Streaming (designed for fast stream processing)
- fast
- Asymmetric (there are private and public keys)
- There is an open C implementation.
We do not try to implement crypto-algorithms ourselves, we take only ready variants!
8.2. The program encrypts files with the public key embedded in it.
After processing the file, it creates a file with the same name and a double extension .txt.crypted,
containing the branding text.
8.2.1 Note that the file extension is signature number one for anti-viruses.
It may be necessary to use the standard extensions (.txt) instead of non-standard ones (.crypted, .crypt, etc.) as much as possible.
8.3 The program works in one of two modes: fast or full.
In the fast mode, only the first megabyte of a file is encrypted. This is needed to cover the system quickly.
In full mode, the entire file is encrypted.
8.4. The program kills processes from the list and stops services from the list before it starts.
If errors occur, the program tries to repeat the action three times at 2 minute intervals.
Further work is not depending on the result of this step.
8.5 The program first processes the directories from a special "fast" list - the list of directories,
Which must be passed first.
8.6 The program DOES NOT TAKE files and directories from the special stop-list - the list of files which cannot be touched.

Combinations of the fast list and the stop list are handled as follows:
8.6.1 We cover all paths from the fast list that are not in the stop list
8.6.2. If the stop-list contains the whole disk, we cover only paths from the fast list on this disk, leaving the rest of the disk untouched
8.6.3 If the stop-list is empty, cover the folders from the fast list first; the other files later.

8.7. The program encrypts only files with extensions from the list of working extensions; the rest are ignored.
8.8. The program deletes files from the special list by overwriting their contents three times:
- first time with constant 0.
- second time with constant FF
- the third time by random garbage
- on the fourth time, the file is deleted.
8.9. The program handles all disks this way.
All errors during operation are ignored.

Thus, there are the following lists:

9. List of changeable settings in the program:
9.1 Group.
9.2 Encryption key
9.3. list of processes and services
9.4. fast list
9.5. stop list
9.6. list of work extensions
9.7. delete list
9.8. text of the landing page
9.9. command server address
All this data (except 9.1, 9.9) the program tries to request from the command server via the TOP network, ten attempts, one minute interval.
If unsuccessful, the program uses the values stored in it, periodically resuming its attempts to update the settings.

BACKEND'A API

POST /HELLO HTTP/1.1

The request is executed when the program starts (either initially or again after a restart).
The content of the HTTP request body is an application/x-www-form-urlencoded container with the following fields:
cid - client ID
group - client group
ip1 - address of the first network interface
ip2 - address of the second network interface
...
ipN - external IP address

If the bot receives a 406 response code and a Not allowed response, the bot immediately stops working and is removed from disk.
In turn, the backend should issue this code and response if it finds that any of the IP addresses provided in the request
is in the CIS zone.

GET /<cid>/<group>/<setting> HTTP/1.1

Setup request. Here
<cid> - client's ID
<group> - client's group
<setting> - setting, enum from
key (public encryption key)
services (list of processes and services - separated by semicolons. If there is line .exe in this field - this is process name. If not it is a service name.)
priority (quick list)
stoplist
ext (list of extensions)
wipe list
landing page
Lists are semicolon separated format.
The landing page is given as is, encoded UTF8.
Key - convenient to work through WinCrypt format (if necessary, wrapped base64).

POST /<cid>/<group>/stat

Sending statistics
The content of the HTTP request body is an application/x-www-form-urlencoded container with the following fields:
total - total files processed
crypted - total files encrypted
wiped - total files were deleted.
ignored - total files skipped

Statistics are sent every 15 minutes, the time is set by a constant in the program.


LANDING PAGE

There are only two landing pages in total:
- On the computer
- on the Internet.

On the computer next to the encrypted file is a text file with the same name and a different extension.
This file should contain a simple link to the page in the .onion domain and instructions on how to download the tor-browser.
For now, let's assume that the path to the landing page is the base .onion domain plus a path equal to md5(bot ID).
It's simple, and doesn't allow you to brute-force the pages for other purposes.

If a tor domain was specified in the properties of the target, the page should open on that domain as well.
Automatic tor-domain management is a separate topic.
You can make 100500 of them and assign them from blanks.

There is a strict requirement for the landing page to prohibit direct contact with the victim, except through our chat room:
- anything that even slightly resembles a bitcoin address must be brutally rejected when uploading page text to the admin,
and removed when the page text is saved.
- Instead, the payout address should be replaced by a macro. Let's say %PAYMENT_ADDRESS%
- in the text should not get contacts of admin (e-mail, jabber and all possible phones, messengers, IRC, etc.).
When updating the page text in the admin panel should automatically check and reject pages with attempts to
to put contacts and wallets on them.
Perhaps you can also do some pre-moderation, with the approval of changes to the pages by our system operators.

In general, you can make a custom landing page only for advanced users, and for the majority
to make standard texts, with the substitution of basic data from macros.

Macros:
%PAYMENT_ADDRESS% - bitcoin wallet for payout (taken from target profile)
%DOUBLE_DATE% - payout doubling date
%LANDING_URL% - link for the linking file - a base URL to which the bot will stick its id to get the full link to the linking page on the Internet


The appearance of the pages is approximately as follows (samples of competitors):
http://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion/837F964AF6B77803#info
http://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion/F32917DB2AA982C9#info

Don't plagiarize!
The meaning must be preserved:
- there should be info on how to buy bits, a list of sites and exchanges
- chat room login
- form for the test transcript of the file.

The test decryption of a file can be used only once and only for image files,
As a rule, they do not contain important information.
When giving the decrypted result, it is necessary to check the content of the file against its signatures.
If none of the supported types have the same signature, the content should not be given and the output should be attributed.
Allowed types: jpg, png, gif, bmp.

The page changes its appearance depending on the target's status:
- if the target has not paid and the next due date has not expired, the page has a normal appearance
- if the target has not paid and the payment deadline has expired, the page displays a warning and a new amount (doubled each period)
- if the target has paid, there is a link to download an unlocker.

IMPORTANT: the amount payable on the landing page is ALWAYS displayed without the discount!
IMPORTANT: the visibility of the link to the anlocker is ALWAYS controlled by the corresponding flag from the target properties (see below - the target has a separate flag
(see below - the target has a separate flag "anlocker available"), NOT the PAY FLAG!

IMPORTANT: the type of landing pages can be controlled by commands from chat after FIXING THE PAYMENT FACT to our bitcoin address
(you need exactly the presence of transaction with the right amount to our assigned address from the target profile).
Two things can change:
- switching the page between "not paid" and "paid" view and the availability of the link to the anloker
- bitcoin address for payout.
All these actions are done by the recaveri, only after he paid us and we fixed it.
These actions are NOT available BEFORE PAYMENT!


ADMINC

In the admin area (by admin area we mean not only the part of the system available to administrators, but also the web application in general) there are several roles:
- admin - sees everything, creates any accounts
- admin - only sees his own data, does not see the data of the neighboring admin, sees chats on his own bots and targets.
- victim - only sees his own chat


ADMINISTRATOR SECTION

Here is a list of pages visible only to the administrator (page name and a list of properties or information on it):

* Dashboard with statistics:
- total adverts
- total bots
- total bots active over the last 24 hours
- total payments

* System settings
- A list (pool) of free bitcoin addresses that can be assigned to advert targets.
Only those that have not yet been assigned to advert targets are available for modification.
This page will be read-only in the implementation with automatic clearing (see below)

* Manage accounts (adverts profiles)
This page lists the adverts (accounts) with the following table columns:
- name
- commission (in percent)
- (per/per) block the adverts
- edit advert
Also the button
- create new advert

Blocking the account means that the administrator can no longer log in to his account.
All payments to his wallet are suspended.

When a new advert is created, the PROXI system assigns him a bitcoin address to which the payments from victims go.
This address is not visible to the advert himself.

In editing the advert profile, you can change the fields:
- name
- commission
- the advert's personal bitcoin address (THIS IS NOT THE ADDRESS that WE will assign to the target!)
This is the SECOND address that is available for editing by both the admin and the advert himself.
For address assignments, see the "ADVERTISEMENTS" section.
- withdrawal via mixer
- mixer address
- mixer time
- mixing commission
These fields should be clarified depending on what bitmix API provides.
Maybe the mixing time and commission are not controlled by us but assigned automatically by the mixer.

For each advert, you should also be able to see advanced statistics
- total profit
- total bots
This stats should not be generated when opening the page, but must be loaded on a separate button/link
(we do so because it most likely makes heavy queries to the database).


ADVERTISING SECTION

This describes the list of pages visible to the Advert.

* Targets.
The following fields are visible in the list:
- name
- group
- number of bots
- activity time of the last bot
- edit
- bot list (opens a separate page, see below)
- delete/in archive.
Also at the top of the page button "Add".

You can only delete a target that has been tapped by 0 bots.
A target that had bounces (i.e., the database has information about bots with the specified group) can only be sent to the archive.
Archive is a separate section with targets that are the same and only for viewing.

When creating/editing a goal, there are the following fields:
** general
- name
- short name of the group, validated by the following rule:
a string of 6 characters, the first three are lowercase Latin characters, the rest are numbers.
The group is a unique field, and is the identifier of the target in the system. The "name" field is used within the admin
The "group" field is used in various kinds of queries and communications between parts of the system.
- status: paid/not paid (can be set either manually or automatically by the payment scripts)
If there was a payment, you need to display a list of payments from bitcoin network with links to the transaction
in any blockchain explorer.
That is, the operator must know if there was a payment, or if the payment flag is set manually.
- chat nickname (operator by default)
** payment
- bitcoin payment address (personal)
- bitcoin recovery address (optional); its purpose - see CHATS
- payout amount
- payout deadline, after which the doubling starts (from here on, the fields are optional)
- payment doubling interval, in days
- available discount (for recoupment companies), in percent (no value by default, i.e. 0)
Off by default. See also under "CHATS" about disabling this option from chat.
** banding
- tor domain (optional)
- on-site branding text (possible to make this an optional extra, but use a standard text by default)
- the lending text in the file
- "Anlocker available" - flag (checkbox), if the anchor on the landing page is available for downloading
- the "test decryption available" flag (it is reset when the test decryption is used)
** locker settings
- key type (private/group)
The only difference here seems to be how many bots can use one key.
- private and public keys in human-readable form
ATTENTION! PLEASE SEE VALIDATION OF THE MAPPING TEXTS IN THE RELEVANT SECTION!
- the list of stopped services and processes
- list of high-priority directories
- the list of ignored paths and masks
- list of running extensions
- to delete list
All the lists are valid path and file masks of Windows separated by ; (semicolon) character.
Additionally, the private encryption key, the locker program and the blocker program are stored in the target properties.
These properties are generated by the system when the target is created and are available for viewing/downloading only.

When creating a new target, a new bot build is generated for it and saved to the database/disk.
The following data is sent to the bot creation script:
- the newly generated encryption key
- custom text for the file
- List of services and processes to be stopped
- list of priority directories
- list of ignored paths and masks
- list of working extensions
- deletion list
In response the bot script creates two binary files, a locker and an unlocker.
The specified properties are flashed into these binary.

If the goal is specified for a separate tor domain, then you need to ensure that the landing page through it.
Accordingly, you need to automate the creation and lifting of such domains.
As an option - domains can be prepared in advance in the number of HHNN pieces, and the user will simply choose them from the pool
(or it will be assigned to him automatically).


* Bots
This is an information page with a list of bots for a particular selected target, sorted by date of last activity and fields:
- CID
- group
- target
- last activity
- chat
When you go to the page bot, in addition to this information should also be available information about the system, collected by the bot.


CHATS

Chat can be accessed in two ways:
- from the target/bot page in the admin (operator/advert)
- From the landing page (victim/recovery).
From the landing page, anyone with a link can enter the chat.
Mode of operation, when several people enter the chat from different addresses or browsers is not prohibited.
The only condition - the nicknames of such users must be different.

The nickname of the advert in the chat is taken from his settings.
The link to the chat is generated on the landing page in such a way that it cannot be guessed by brute force (i.e., an element of randomness is introduced).

Chat is tied to the target:
- if the target is with a group key, then each bot from the group gets into the same chat
- If the target is with a private key, then one bot has a separate chat.

Adverts can only see their chats, admins can see everything.

When entering a chat room, the victim is prompted (like in IRC channels) and
a message saying that you can type /help to see the available commands.

There are the following commands in chat:
/help
displays text about the commands private and clear with their descriptions.
The unpaid command is excluded from the prompt

/private
Makes chat invisible to other chatters on the victim's side (i.e. if more than one person
is sitting in the chat on the victim's side).
On the admin/advert side, it doesn't affect anything - the chat history is visible in full.

/clear
Clearing the chat history on the victim's side.
On the admin/advert side has no effect - the chat history is full.

/unpaid.
Turns off the "available link to anlocker" flag.
This and subsequent commands are reported in the chat by the advert, for the recoupment company, after an agreement on payment and discount has been reached.
no more // -Available ONLY after receiving payment to the target's bitcoin address.
COMMAND is NOT available if you set "paid" flag manually from admin panel!
The command turns off the flag "available anlocker" in the target profile, accordingly it changes the appearance of the landing page.

/bitcoin <bitcoin address>
Changes the payout wallet address on the landing page.
Available ONLY after receiving a payment to the bitcoin address of the target.
NOT AVAILABLE if "paid" flag is set manually from admin area!

/paid
Puts up a "paid" flag.
Can be accessed ONLY after receiving payment to the bitcoin address of the target.
CANNOT BE ACCEPTED if "paid" flag is set manually from admin panel!
The command turns on the flag "available anlocker" in the target profile, accordingly it changes the appearance of the landing.

The commands are intended solely for recovery actions.
The general scenario is as follows:
- Recoveries open a private chat
- the recuperator introduces himself and arranges a discount / payment terms
- in response the operator from our side gives a command to hide the fact of payment - /unpaid
- the recovers command /unpaid to disable the link to the blocker and /bitcoin to change the bitcoin payment address on the landing page
It has to be done BEFORE payment!
- after payment confirmation, operator gives the link to the unlocker in a private chat
- after receiving payment from victim to his address, recovery can switch the page view to give the victim access to the blocker.

CRYPTOVALUTS

We want to support other cryptocurrencies besides bitcoin - more
* dash
* zcash
* monero
Everything written in this ToR about bitcoin must be implemented for those cryptocurrencies as well.
For example, if you want to specify bitcoin address in database record properties, then you have to specify addresses
for other currencies.


CLEARING AND PAYMENT SCRIPTS

Clearing is the settlement with adversaries, paying them what is due.

Depending on which clearing scheme will be chosen (manual or automatic),
there will be different complexity and convenience of the system.

Manual clearing:
+ fully protected from wallet theft by staff and competitors
- requires additional daily work to send out funds
- requires additional manual work to maintain the system (generation of addresses)

Automatic clearing:
+ you can completely automate everything
- your wallet is available to everyone who has access to the system (a matter of trust).

Purpose of payment scripts:
1) tracking bitcoin payments to our addresses
2) clearing (automatic sending of money to addresses of adverts)
3) generating a pool of bitcoin addresses to assign to targets.

The first script will be in any variant of clearing; the second and third script will be in automatic clearing only.

The scripts must be hosted and executed on a separate server with increased security.
The database communicates with the network.


AUTOMATIC CLEARING

If you do automatic clearing, then in all likelihood you can't do without raising a full bitcoin node.

The payment server hosts a wallet to which the generated bitcoin addresses are linked,
and a full bitcoin node is up.

Clearing can be performed both directly to the wallets of adverts and through mixers.
In the case of working through mixers, in the general settings of the system you need to specify:
- option "clearing via mixer"
- mixer bitcoin address
- mixing time
- mixing commission
OR
the same options can be in the advert profile (available for editing by admin).

Three crony-tasks work:

1) checks incoming payments to each of the bitcoin addresses we have assigned to targets,
and marks targets as paid if the amount is sufficient.

2) for paid purposes, automatically generates outgoing payments to adverts' addresses
(incoming amount minus commission).

3) checks the stock of free addresses in the database, if necessary generates new addresses and stacks them in the database.

All of this can be done in a bunch of ways:
- the full bitcoin node has a bitcoin-cli utility that can do everything
- via JSON-RPC (raise on full node)

MANUAL CLEANING

In this case, you can do without a full bitcoin node.

1) To check bitcoin address payment status, several approaches can be used:
- Use the native Bitcoin RPC API, connecting to a specific bitcoin server/servers.
There is already a solution out of the box for PHP:
https://en.bitcoin.it/wiki/API_reference_%28JSON-RPC%29#PHP
https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list
- Use blockchain explorer APIs. This option is worse because blockchain explorers often change
addresses, APIs and in general are subject to frequent changes.
For example:
https://blockchain.info/q

2) Payments to adverts need to be processed manually.
To do this, you will need a report "To be paid" in the admin panel, which must go
The list of addresses with sums.
The owner of the system downloads this report every day and manually makes payments.

3) Similarly, you need to manually generate new bitcoin addresses and upload them to the admin,
on a separate page in the system settings.

*************************
SECOND.
The following needs to be provided:
1. we need a new loader, which will load and run the load in batches (several .exe at once)
2. The pwgrab styler must be adapted to reset the data in the storage:
- replace the DPOST protocol with a file transfer protocol.
- Get command server address via Emercoin DNS
- bot's CID
- Bot's CID must be generated uniformly and unambiguously, regardless of user,
so that it is possible to repeat its generation in styler.

Probably, you should completely separate pwgrab from browsers engine,
by cutting off all unnecessary stuff and making it minimalist (remove lefty and duplicated code).

3. There must be a section in the admin panel for viewing leaked passwords.
Bind it to the Advert; be sure to remember the ID of the bot/machine.
4. Getting bot's command server address via Emercoin DNS.