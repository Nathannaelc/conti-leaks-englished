VPN MODULE AND BRIDGE
STATEMENT OF WORK


GLOSSARY
Point - in a Peer-to-Peer connection, one of the connection points. Local - the one closest to us; remote - the one farther away.
Bridge - in this context, it is a mediation server, or backconnect server, that switches VPN connections among themselves.


PURPOSE

Development of a complex similar in functionality to TeamViewer in VPN mode, consisting of three parts:
- A module on machine A, which we want to connect to (the far end);
- VPN client on machine B, from which we want to connect to machine A and its entire local network (local end);
- VPN-bridge C, which receives incoming VPN connections from A and B and routes them between each other (router, hub).

The point of using a VPN bridge is that machine A is usually behind a NAT/firewall and there is no direct connection to it.
Also, because TCP incoming and outgoing ports can be closed, you must use ports like 80 and 443
for outgoing connections.
Therefore the connection works like this:
- A connects to C.
- B connects to C
- C forwards routes between A and B's local hosts so that B sees A and her network but not the other way around.

The emphasis here is not so much on VPN as on routing. You need a NECESSARY way to join a remote network.
But a VPN is also needed because unencrypted traffic can be cut by firewalls and DPI filters.


MODULE: IMPLEMENTATION

The module is designed according to the rules from the "module_HOWTO" document.
The module has a single config with the name "vpnsrv".
The content of the config is plain text, with \r\n line separator.
The line has one address/server name in the format address:port or hostname:port.
This is the address of the VPN bridge B.

It is assumed that the module works with administrator privileges.

On startup, the module acts as follows:
- waits for a config with the bridge addresses
- randomly finds a working bridge (to which it has succeeded in opening a connection)
- If there are no working bridges, it generates "VPN bridge failure" event and then requests its own unloading with "WantRelease" event.
- Creates new VPN-connection to the bridge B, using standard Windows means ("Adapter and Sharing Center" - "Connect to network").
The login to the connection is ParentID (see ParentInfo in "module_HOWTO"), the password is ParentGroup.
- Starts VPN connection to bridge B
- periodically checks the status of the connection (you can simply ping to the address of remote point A)
- if the connection is closed, restores it
- when the module is unloaded by calling Release(), terminates the connection and removes it from the system.

In general, it is suggested to use the built-in Windows VPN-client. But you need to find a way to suppress balloons
from the system tray, when connecting/disconnecting.
But here the decision is up to the developer. The native client is offered because it is already in the OS; if there is a way to create a lightweight VPN client,
which takes up to 1 megabyte and is a single .dll (together with a plugin), that's a valid option.


BRIDGE: IMPLEMENTATION

Presumably, it is possible to organize a bridge on OpenVPN.
There are some questions about routing.
It is very likely that machines A from different organizations will have repeated subnet addresses (192.168.0.x, 192.168.1.x, 10.0.x.x etc.).
The same is possible for clients B which are behind NAT.
Therefore, if two or more independent clients (B1, B2) and modules (A1, A2) connect to the bridge at the same time, there is a high probability of collision in routing between subnets.
The naive solution is to prohibit more than one A/B pair.
We need to find ways around this problem.

It is assumed that there is an HTTP API to control the bridge other than OpenVPN.

The API has the following call:

GET /api/session/ParentID/ParentGroup HTTP/1.1

Here ParentID/ParentGroup are the identifiers (IDs) of module A.
In response, the bridge sends the OpenVPN client config to client B in clear text, which can be used to connect to the paired module A.

When processing the request, the bridge:
- Memorizes module A's ID and records the ID as a valid login/password with a lifetime of 3600 seconds (setup)
- generates session login/password for paired client B with lifetime of 3600 seconds (customization)
- generate an OpenVPN config for paired client B and return it with HTTP code 200
- if it is impossible to generate the OpenVPN config due to lack of data (e.g. the subnet address of module A is unknown and it is not possible to force a route to its subnet),
the bridge remembers the request and sends its number (receipt) to the client, together with HTTP-code 202 Accepted, until the data is clarified.
- The HTTP client periodically polls the readiness of the request with the same URI GET /api/session/ParentID/ParentGroup HTTP/1.1
and analyzes the response code:
200 - response is ready
204 - in processing
40* - processing error
50*

HTTP API should be protected by a simple protection against unauthorized access - most likely Security by obscurity - a complex non-indexable path to the API,
or HTTP Basic Auth.

Thus, the bridge has the following functions:

1. module authorization
- Module must specify ParentID/ParentGroup as login and password for connection; bridge must authorize module.
Bridge gets list of actual logins/passwords and their lifetime in seconds from HTTP API.
Only connections with passwords from that list may be authorized.
2. client authorization
- for the client, the bridge generates a session login/password, as well as the client config for OpenVPN and sends them through the control API.


USER SCENARIO

I, as a user, went into the dark admin, selected a client session with a PARTICULAR ID and group on whose behalf I want to work.
I clicked the VPN button in the panel.

Behind the scenes, the far end (A) started the VPN module, got the config with the address of the bridge and brought up a VPN connection to it, LOCKED with its ID and group.
This way, the bridge knows who is connected to it - it needs this to find pairs of connections A and B.
Meanwhile, the dark admin pulled the bridge's web backend through the REST API, requesting the config for the connection you just pulled up.
Specifying the bot's ID and group in doing so.
The bridge generated a session login password for the paired client VPN connection, and generated a temporary OpenVPN config (a simple text file)
for the paired connection. And gave it in response to a REST API request. The dark admin sends the config to the user.
The user receives this config and slips it to the OpenVPN client.
A pair connection from the user side to the bridge is raised.
The bridge can bind a pair of connections-the end connection (A-B) and the user connection (B-B), because it knows both the bot's ID and group,
identifying A-B, and the user's session password identifying B-B. The bridge checks the route in the OS routing table.
Additional routes for the far ends of the connection pair have already been given when setting up the corresponding connections.


MODULE MANUAL

1. We go to Lero, choose the session we are interested in
2. Run
push_back
command code 62
command parameters
vpnDllstart
3. waiting for module to start (see module's message in lero)
2020-01-16 13:25:58 vpnDll net flyAgaric Can't connect to 173.232.146.30, error 718
2020-01-16 13:25:59 vpnDll net flyAgaric VPN bridge failure


The testing algorithm is as follows
1. Run the software on the test machine, let it unfold
2. open its page in the admin area of LERO
3. run the command push back: 62 vpnDll start
4. Wait for the module to respond and see how it works in the Admin log
5. Watch what happens on the screen at the same time
6. And in the admin area, search for http:///admin/index.php?r=vpn%2Findex session that was opened by the module
in short, a simple test - the module works if you run it in Lero with the command 62 vpnDll start and get a session in the admin area