DISTRIBUTION MODULE
STATEMENT OF WORK

PURPOSE

Improve the existing network distribution module:
* Add a universal interface for adding new exploits
* Define the exploit type to be used and design it to work through the interface
* Add the BlueKeep exploit to the module.


MODULE DESCRIPTION

The module scans the local network and applies some kind of exploit to the machines found - the type is not yet known.
It is known that the shellcode downloads the payload from http://galamatics.com/jomangi1.png and http://galamatics.com/jomangi2.png
(most likely via DownloadFromUrlA) and runs it. The organization of the shellcode is unknown:
if it's exploit-specific, there might be ROP.
If not, maybe it searches for the right functions in the import table and works through them.

Three types of network environment are scanned:
- a regular Windows workgroup
- Windows domain
- LDAP

The module is designed according to the document module_HOWTO.


DORABLE

All modifications must be done within the module_HOWTO document.

The network scanning code does not require any modification.

The following needs to be improved:
1) The exploit interface:
- the exploit must have a basic Exploit(const char* hostname) method (this can be a machine address or its name)
- The network scanning code must be isolated from the exploitation code.
- The module must be assembled as a constructor, from the desired combination of network scanner and exploit variant, by conditional compilation.
The goal is to reuse the scan code, to create different modules based on it.
A combination of "each with each" is not needed (each exploit with each scan variant) - there is no goal to achieve full variability.

This constructor should be implemented as follows:
- Use macros in the file config.h to select which module we are building.
The same macros are used to disable the code that is not used in this build.
For example, if we use the FOO exploit, we do

config.h:
#define FOO
#undef BAR

foo.cpp:
#include "config.h"
#ifdef FOO
...
code here
...
#endif

- The name of the output file should be different for different variations
- It is best to use Visual Studio compilation profiles for different variations
In this case you can specify the preprocessor macros directly in the build settings for a particular project profile.
Create a separate build profile for each variant.

2) Add the BlueKeep exploit to the module, according to the exploit interface.
Information on BlueKeep:
https://github.com/umarfarook882/CVE-2019-0708
https://github.com/n1xbyte/CVE-2019-0708
https://github.com/adalenv/CVE-2019-0708-Tool
https://github.com/gobysec/CVE-2019-0708
https://github.com/Ekultek/BlueKeep
https://github.com/robertdavidgraham/rdpscan
https://github.com/zerosum0x0/CVE-2019-0708
https://github.com/dothanthitiendiettiende/BlueKeep
https://github.com/Ekultek/BlueKeep/blob/master/bluekeep_poc.py

3) Finalization of the module
- obfuscate strings using Andrivet Advanced Obfuscator library, apply encryption from MetaString4.h
- obfuscate system calls via GetApi
- add the following events:
  + Module wormDll build %date% %time% started - when the module starts
  + Trying %sploit% on %hostname% (%addr%) - when applying exploit to host
- Make logging to a file in the current directory. The name of the log file is the same as that of the module you're launching, but with a .log extension.
Use the attached logging library.
- Logging should only occur in the Debug, Release_logged build profiles. In the Release_nologs profile logging shall be disabled
(by disabling LOG_TO_FILE, LOG_TO_CONSOLE macros)
