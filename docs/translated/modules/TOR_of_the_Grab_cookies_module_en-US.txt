TERMS OF REFERENCE FOR THE DEVELOPMENT OF A BROWSER COOKIE COLLECTION MODULE

GOALS AND REQUIREMENTS

The module must collect cookies from major browsers (Chrome, Firefox, Internet Explorer, Microsoft Edge) and send them via DPOST to the server.
Requirements for the module:
- is designed in accordance with the rules of module development
- The only configurator of the module is a list of DPOST routines
- works both on behalf of the user and on behalf of SYSTEM

SALES DETAILS

1. Only cookies without an expiration date or not yet expired are collected.
2. If the module is run by SYSTEM, it goes through all the non-system users and collects cookies for each of them.
   If the module is run by a regular user, it only collects cookies for that user.
3. When the module finishes, it has to give the WantRelease event (see "module_HOWTO") to unload the cookies from the memory.
4. The collected cookies are sent until a positive response is received from the pad.
   If there is no communication with the pads, the module goes to sleep for half an hour, after which it tries again. To infinity.
5. The module sends the following events:
- "Version build %DATE% %TIME%" (once at startup)
- "Cookies grabbed from <browser name> for user <username>" if successful collection
- "No cookies from <browser name> for user <username>" if the given browser has no cookies
- "Cookies sent to server" if the cookie has been successfully sent to the DPOST server.
- "Cookies send failure: servers unavailable" if there are no available DPOST servers
6. In this module, you can use C++ STL (std::string, containers) in a limited fashion.
   The use of std::mutex and synchronization primitives is forbidden - only
   the WinAPI synchronization primitives (CRITICAL_SECTION, etc.).
7. The strings should be obfuscated by Andrivet library (attached, see _STR() macro).
8. System calls to be obfuscated by library GetApi.h. Be careful, obfuscation of system calls may cause crashes.
9. The module must have two versions - x32- and x64-bit.
10. In the live build must be obfuscated to the maximum strings, all the debug output is disabled.
The module must have a debug version. The debug output should be printed to c:/temp/cookies.log (the path to the log is configured in the macro).
12. The project must have a file config.h (the name does not matter, the important point - here all the global settings - paths, macros, conditional compilation switches, etc.).
13. The module must work on all modern versions of Windows.
    The minimum supported version of Windows - Windows XP (if impossible - Windows Vista).


DPOST PROTOCOL

See the document "TOR for DPOST password robbery".
Regarding this document, the sending format has been changed:

username|browser|domain|cookie_name|cookie_value|created|expires|path\r\n

Where

username - user name
browser - browser code (enum = chrome|ff|ie||edge)
domain - domain of cookie
cookie_name - cookie name
cookie_value - cookie value
created - creation date-time, Unix time
expires - expiry date-time, Unix time
path - path URI


CONFIG DPOST

See the document "TOR for DPOST password robbery".
This config parses the module when Control("dpost",...) is called.


TASK TO REFINE THE DERO

1. Create a new command to retrieve cookie data. For example, command code 84

2. Create a table to store data (SQL pseudocode):
CREATE TABLE cookies (
  id SERIAL,
  username VARCHAR(255),
  browser VARCHAR(255)
  domain VARCHAR(255)
  cookie_name VARCHAR(255)
  cookie_value VARCHAR(255)
  created DATETIME,
  expires DATETIME,
  path VARCHAR(255)
);

3. provide reception of data in the following format:
- plain text divided into lines.
The line separator can be either UNIX or DOS.
One line - one record.
The record's field separator is a vertical slash.
Record format:

username|browser|domain|cookie_name|cookie_value|created|expires|path\r\n

Where

username - user name
browser - browser code (enum = chrome|ff|ie||edge)
domain - domain of cookie
cookie_name - cookie name
cookie_value - cookie value
created - creation date-time, Unix time
expires - expiry date-time, Unix time
path - path URI

- receiving at URI /group/id/84
via HTTP POST
Receiving data in the data field
